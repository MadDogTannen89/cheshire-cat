{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello, dear!","text":""},{"location":"#what-is-this","title":"What is this?","text":"<p>If you want to build a custom AI on top of a language model, the Cat can help you:</p> <ul> <li>Language model agnostic (works with OpenAI, Cohere, HuggingFace models, custom)</li> <li>Long term memory</li> <li>Can use external tools (APIs, custom python code, other models)</li> <li>Can ingest documents (.txt, .pdf)</li> <li>Extendible via plugins in Python</li> <li>100% dockerized</li> </ul> <p> </p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#download","title":"Download","text":"<p>Clone the repository on your machine:</p> <pre><code># Clone the repository\ngit clone https://github.com/pieroit/cheshire-cat.git\n</code></pre>"},{"location":"#install","title":"Install","text":"<p>To run the Cheshire Cat, you need to have <code>docker</code> (instructions) and <code>docker-compose</code> (instructions) installed on your system.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>For quick setup and make the Cat run using the <code>gpt3.5-turbo</code> OpenAI model, do the following:</p> <ul> <li>Create and API key with <code>+ Create new secret key</code> in your OpenAI personal account</li> <li>Create an <code>.env</code> file in the cloned repository</li> <li>Write your API key in the <code>.env</code> file (<code>OPENAI_KEY=past-key-here</code>)</li> <li>Start the app with <code>docker-compose up</code></li> <li>Chat with the Cheshire Cat on <code>localhost:3000</code>.</li> <li>You can also interact via REST API and try out the endpoints on <code>localhost:1865/docs</code></li> </ul> <p>The first time you run the <code>docker-compose up</code> command it will take several minutes as docker images occupy some GBs.</p> <p>Here is a list of commands to achieve the aforementioned steps:</p> <p><pre><code># Open the cloned repository\ncd cheshire-cat\n\n# Create new .env file and write OpenAI API key to it\necho \"OPENAI_KEY=paste-key-here\" &gt; .env\n\n# Run docker containers\ndocker-compose up\n</code></pre> When you're done using the Cat, remember to CTRL+c in the terminal and <code>docker-compose down</code>.</p>"},{"location":"#update","title":"Update","text":"<p>As the project is still a work in progress, if you want to update it run the following: <pre><code># Open the cloned repository\ncd cheshire-cat\n\n# Pull from the main remote repository\ngit pull\n\n# Build again the docker containers\ndocker-compose build --no-cache\n\n# Run docker containers\ndocker-compose up\n</code></pre></p>"},{"location":"#custom-code","title":"Custom code","text":"<p>Note</p> <p>If you plan to write custom tools, remember to start your folders with two underscores to avoid conflict between the git repository and the local one.</p> <p>Don't forget to give the project a star! \u2b50 Thanks again!\ud83d\ude4f</p>"},{"location":"#credits","title":"Credits","text":"<p>Logo image generated with MidJourney, prompted by Edgars Romanovskis</p>"},{"location":"#which-way-to-go-from-here","title":"Which way to go from here?","text":"<pre><code>\"Would you tell me, please, which way I ought to go from here?\"\n\"That depends a good deal on where you want to get to,\" said the Cat.\n\"I don't much care where--\" said Alice.\n\"Then it doesn't matter which way you go,\" said the Cat.\n\n(Alice's Adventures in Wonderland - Lewis Carroll)\n</code></pre>"},{"location":"how-the-cat-works/","title":"How the Cat works","text":""},{"location":"how-the-cat-works/#components","title":"Components","text":""},{"location":"how-the-cat-works/#main-loop","title":"Main loop","text":""},{"location":"plugins/hooks/","title":"Hooks","text":""},{"location":"plugins/hooks/#todo-insert-hook-search","title":"TODO: insert hook search","text":""},{"location":"plugins/plugins/","title":"How to write a plugin","text":"<p>To write a plugin just create a new folder in <code>web/cat/plugins/</code>. </p> <p>Warning</p> <p>To avoid conflict between the Cat git and your local folder put two  underscores to make the folder invisible to GitHub. I.e. <code>__myplugin</code>.</p> <p>Add a python file to your plugin folder:</p> <pre><code>\u251c\u2500\u2500 web\n\u2502   \u251c\u2500\u2500 cat\n\u2502   \u2502   \u251c\u2500\u2500 plugins\n|   |   |   \u251c\u2500\u2500 __myplugin\n|   |   |   |   \u251c mypluginfile.py\n</code></pre> <p>Now let's start <code>mypluginfile.py</code> with a little import:</p> <pre><code>from cat.mad_hatter.decorators import tool, hook\n</code></pre> <p>You are now ready to change the Cat's behavior using Tools and Hooks.</p> <p></p>"},{"location":"plugins/plugins/#hooks","title":"Hooks","text":"<p>Hooks let you influence how the Cat runs its internal functionality. More details on hooks here</p>"},{"location":"plugins/plugins/#tools","title":"Tools","text":"<p>Tools let you define custom code that the Cat can use. More details on tools here</p> <p>TODO: the difference is not clear, find better working and simple examples</p>"},{"location":"plugins/tools/","title":"Tools","text":"<p>A Tool allows the Cat to execute custom code during conversation, for example:</p> <ul> <li>communicate with a web service</li> <li>search information in an external database</li> <li>execute math calculations</li> <li>run stuff in the terminal (danger zone)</li> <li>keep track of specific information and do fancy stuff with it</li> <li>your fantasy is the limit!</li> </ul> <p>Tools in the Cheshire Cat are inspired and extend langchain Tools, an elegant Toolformer implementation.</p>"},{"location":"plugins/tools/#your-first-tool","title":"Your first Tool","text":"<p>A Tool is just a python function. In your <code>mypluginfile.py</code> create a new function with the <code>@tool</code> decorator:</p> <pre><code>@tool # (1)\ndef get_the_time(tool_input, cat): # (2)\n\"\"\"Retrieves current time and clock. Input is always None.\"\"\" # (3)\nreturn str(datetime.now()) # (4)\n</code></pre> <ol> <li>Python functions in a plugin only become tools if you use the <code>@tool</code> decorator</li> <li>Every <code>@tool</code> receives two arguments: a string representing the tool input, and the Cat instance. </li> <li>This doc string is necessary, as it will show up in the LLM prompt. It should describe what the tool is useful for and how to prepare inputs, so the LLM can select the tool and input it properly.</li> <li>Always return a string, which goes back to the prompt informing the LLM on the Tool's output.</li> </ol> <p>Let's see all the parts step by step...</p> <p>TODO:</p> <ul> <li>a better example?</li> <li>show how tools are displayed in the prompt and how the LLM selects them</li> <li>more examples with little variations<ul> <li>the tool calls an external service</li> <li>the tool reads/writes a file</li> <li>the input string contains a dictionary (to be parsed with <code>json.loads</code>)</li> <li>the tool manages a conversational form</li> <li><code>@tool(return_direct=True)</code> to let the returned string go straight to the chat</li> <li>show how you can access cat's functionality (memory, llm, embedder, rabbit_hole) from inside a tool</li> <li>what else? dunno</li> </ul> </li> </ul>"}]}